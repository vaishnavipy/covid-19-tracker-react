[{"/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/index.js":"1","/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/App.js":"2","/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/card.js":"3","/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/country.js":"4","/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/chartDiv.js":"5"},{"size":393,"mtime":1610473926684,"results":"6","hashOfConfig":"7"},{"size":1753,"mtime":1610560040560,"results":"8","hashOfConfig":"7"},{"size":1550,"mtime":1610560442822,"results":"9","hashOfConfig":"7"},{"size":1043,"mtime":1610488652676,"results":"10","hashOfConfig":"7"},{"size":2217,"mtime":1610559452641,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"loatw8",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/index.js",[],["25","26"],"/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/App.js",["27","28"],"\nimport './App.css';\nimport logo from \"./logo.png\"\nimport Card from \"./card\"\nimport { useEffect,useState } from 'react';\nimport Country from \"./country\"\nimport ChartDiv from \"./chartDiv\"\n\n\n\nfunction App() {\n  const [covidData,setCovidData] = useState(\"\")\n\n  const [country,setCountry] = useState(\"\")\n\n\n\n  useEffect(()=>{\n\n    fetch(\"https://covid19.mathdro.id/api\")\n    .then(response => response.json())\n    .then(data => setCovidData(data) )\n\n    \n  },[])\n\n  \n  function  selectCountry(data){\n\n    setCountry(data)\n\n  }\n\n  useEffect(()=>{\n    if(country){\n      if(country === \"global\"){\n        fetch(\"https://covid19.mathdro.id/api\")\n        .then(response => response.json())\n        .then(data => { setCovidData(data)})\n    \n      }else{\n\n    fetch(`https://covid19.mathdro.id/api/countries/${country}`)\n    .then(response => response.json())\n    .then(data => setCovidData(data) )\n      }\n    }\n  },[country])\n\n \n\n  return (\n      \n    <div className=\"app-container\">\n      <div className=\"logo\"><img src={logo}/></div>\n      <p>Data source from <span className=\"api\"><a href=\"https://github.com/mathdroid/covid-19-api\" target=\"_blank\">mathdroid's</a></span> api</p>\n      \n      <div className=\"card-grid\" >\n\n      {covidData &&  <Card cname=\"Infected\" data={covidData.confirmed.value} /> }\n      {covidData && <Card cname=\"Recovered\" data={covidData.recovered.value} /> }\n      {covidData && <Card cname=\"Deaths\" data={covidData.deaths.value} /> }\n      \n      </div>\n\n      {covidData && <Country selectCountry={selectCountry}/> }\n\n      {covidData && country && <ChartDiv confirmed={covidData.confirmed.value} recovered={covidData.recovered.value} deaths={covidData.deaths.value} country={country}/> }\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/card.js",["29"],"/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/country.js",[],"/Users/vaishnaviravichandran/Desktop/React/covid-19-tracker/src/chartDiv.js",["30","31","32"],"import React, { Fragment, useEffect, useState } from \"react\"\nimport Chart from \"chart.js\"\n\n\nfunction ChartDiv({confirmed,recovered,deaths,country}) {\n\n   \n\n   \n   const [d,setD] = useState(\"\")\n\n    const [barChart,setBarChart] = useState(\"\")\n\n    const [options,setOptions] = useState(\"\") \n\n \n\n    useEffect(()=>{\n        console.log(\"mount\")\n        setD({\n            labels: [\"Infected\",\"Recovered\",\"Deaths\"],\n            datasets: [{\n           label: \"People\",\n            backgroundColor: [\"rgba(252,219,141,0.7)\",\"rgba(125,252,147,0.7)\",\"rgba(251,131,133,0.7)\"],\n            borderColor: \"none\",\n            borderWidth: 2,\n            \n            data: [0,0,0],\n            }]\n        })\n\n        setOptions({\n            maintainAspectRatio: false,\n            \n            title: {\n                display: true,\n                text: `The current state in ${country}`\n            }, \n            legend: {\n                display: false},\n            scales: {\n            yAxes: [{\n                stacked: true,\n                gridLines: {\n                display: true,\n                \n                }\n            }],\n            xAxes: [{\n                gridLines: {\n                display: false\n                }\n            }]\n            }\n        })\n\n        \n\n       \n            \n\n\n    },[])\n\n    useEffect(()=>{\n        console.log(\"d & option chnage\")\n\n        if(d && options){\n\n        setBarChart(Chart.Bar(`chart`, {\n            options: options,\n            data: d\n        }))\n    }\n        \n    },[d,options]) \n\n\n\n   \n\n   \n\n    useEffect(()=>{\n      \n\n        if(barChart && confirmed){\n            console.log(\"update barchart\")\n\n        barChart.options.title.text =  `The current state in ${country}`\n        barChart.data.datasets[0].data[0] = confirmed; // Would update the first dataset's value of 'March' to be 50\n        barChart.data.datasets[0].data[1] = recovered; \n        barChart.data.datasets[0].data[2] = deaths; \n        barChart.update()\n        }\n\n\n    },[confirmed,recovered,deaths,barChart])\n\n    \n\n  \n      \n\n\n    return( \n        <div className=\"chart-container\">\n        <canvas id=\"chart\"></canvas>\n        </div>\n        )\n   \n}\n\nexport default ChartDiv",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":55,"column":29,"nodeType":"39","endLine":55,"endColumn":46},{"ruleId":"40","severity":1,"message":"41","line":56,"column":49,"nodeType":"39","endLine":56,"endColumn":117},{"ruleId":"37","severity":1,"message":"38","line":30,"column":35,"nodeType":"39","endLine":30,"endColumn":55},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":63,"column":7,"nodeType":"48","endLine":63,"endColumn":9,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":98,"column":7,"nodeType":"48","endLine":98,"endColumn":44,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'country'. Either include it or remove the dependency array. If 'setOptions' needs the current value of 'country', you can also switch to useReducer instead of useState and read 'country' in the reducer.","ArrayExpression",["54"],"React Hook useEffect has a missing dependency: 'country'. Either include it or remove the dependency array.",["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [country]",{"range":"60","text":"61"},"Update the dependencies array to be: [confirmed, recovered, deaths, barChart, country]",{"range":"62","text":"63"},[1317,1319],"[country]",[2012,2049],"[confirmed, recovered, deaths, barChart, country]"]